{"ast":null,"code":"import { Loader } from '@googlemaps/js-api-loader';\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      googleApiKey: 'AIzaSyB41Bg4t97fmYwKs3MEL9DmicL53xQKpAY',\n      weatherApiKey: '6d78fcf2b6ddf4f00ae680a37639b3d6',\n      latlng: {\n        lat: 40.76575889443308,\n        lng: -111.89062013069112\n      },\n      map: null,\n      marker: null,\n      weather: null\n    };\n  },\n\n  mounted() {\n    var mapLoader = new Loader({\n      apiKey: this.googleApiKey,\n      version: \"weekly\",\n      libraries: [\"places\"]\n    }).load().catch(err => {\n      console.warn('Err loading map: ', err);\n    }).finally(() => {\n      this.loadGoogleMap();\n    });\n  },\n\n  methods: {\n    loadGoogleMap() {\n      this.map = new google.maps.Map(document.getElementById(\"google-map\"), {\n        center: this.latlng,\n        zoom: 10,\n        gestureHandling: 'none'\n      });\n      this.setMarker(this.latlng);\n      google.maps.event.addListener(this.map, \"click\", e => {\n        this.latlng = {\n          lat: e.latLng.lat(),\n          lng: e.latLng.lng()\n        };\n        this.setMarker(e.latLng);\n        this.map.setCenter(this.latlng);\n      });\n    },\n\n    setMarker(location) {\n      if (this.marker) {\n        this.marker.setPosition(location);\n      } else {\n        this.marker = new google.maps.Marker({\n          position: location,\n          map: this.map,\n          draggable: true\n        });\n        google.maps.event.addListener(this.marker, 'dragend', data => {\n          this.latlng = {\n            lat: this.marker.getPosition().lat(),\n            lng: this.marker.getPosition().lng()\n          };\n          this.map.setCenter(this.latlng);\n          this.getWeatherData();\n        });\n      }\n\n      this.getWeatherData();\n    },\n\n    getWeatherData() {\n      axios.get(`http://api.openweathermap.org/data/2.5/weather?lat=${this.latlng.lat}&lon=${this.latlng.lng}&units=imperial&appid=${this.weatherApiKey}`).then(res => {\n        this.weather = {\n          'Location': res.data.name,\n          'Condition': res.data.weather[0].main,\n          'Temperature': `${res.data.main.temp} F`,\n          'Humidity': `${res.data.main.humidity}%`,\n          'Sunrise': this.toDateString(res.data.sys.sunrise),\n          'Sunset': this.toDateString(res.data.sys.sunset),\n          'Wind Speed': `${res.data.wind.speed} mph`,\n          'Wind Direction': `${res.data.wind.deg} degrees`\n        };\n      }).catch(err => {\n        console.warn('Error fetching weather data: ', err);\n      });\n    },\n\n    toDateString(unixString) {\n      return new Date(unixString * 1000).toLocaleString(\"en-US\", {\n        hour: \"numeric\",\n        minute: \"numeric\",\n        timeZone: 'America/Denver',\n        timeZoneName: \"short\"\n      });\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["Loader","axios","data","googleApiKey","weatherApiKey","latlng","lat","lng","map","marker","weather","mounted","mapLoader","apiKey","version","libraries","load","catch","err","console","warn","finally","loadGoogleMap","methods","google","maps","Map","document","getElementById","center","zoom","gestureHandling","setMarker","event","addListener","e","latLng","setCenter","location","setPosition","Marker","position","draggable","getPosition","getWeatherData","get","then","res","name","main","temp","humidity","toDateString","sys","sunrise","sunset","wind","speed","deg","unixString","Date","toLocaleString","hour","minute","timeZone","timeZoneName"],"sourceRoot":"","sources":["/Users/taylorlaing/Desktop/Laing Development/GitHub/weather-locator/src/components/MapLocator.vue"],"sourcesContent":["<template>\n    <div class=\"content-wrapper\">\n        <div class=\"row text-center align-items-center\">\n            <div class=\"col col-md-7 order-md-1 col-12 order-2\">\n                <div id=\"google-map\"></div>\n            </div>\n            <div class=\"col col-md-5 order-md-2 col-12 order-1\">\n                <div class=\"row justify-content-center p-5\">\n                    <div class=\"col col-10\">\n                        <h1>Weather Discovery Map</h1>\n                        <p>\n                            Select a point on the map, or drag marker to a new position, to find real-time data on the local weather\n                        </p>\n                    </div>\n                </div>\n                <div class=\"row justify-content-center px-5\" v-for=\"(item, key) of weather\" :key=\"key\">\n                    <div class=\"col col-md-5 col-6 my-2\">\n                        <span class=\"badge badge-primary w-100 px-3 py-2\">{{key}}</span>\n                    </div>\n                    <div class=\"col col-md-7 col-6 my-2 weather-data\">\n                        {{item}}\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { Loader } from '@googlemaps/js-api-loader';\nimport axios from 'axios';\n\nexport default {\n  data() {\n      return {\n          googleApiKey: 'AIzaSyB41Bg4t97fmYwKs3MEL9DmicL53xQKpAY',\n          weatherApiKey: '6d78fcf2b6ddf4f00ae680a37639b3d6',\n          latlng: {\n            lat: 40.76575889443308,\n            lng: -111.89062013069112\n          },\n          map: null,\n          marker: null,\n          weather: null\n      }\n  },\n\n  mounted() {\n    var mapLoader = new Loader({\n        apiKey: this.googleApiKey,\n        version: \"weekly\",\n        libraries: [\"places\"]\n    }).load()\n    .catch(err => {\n        console.warn('Err loading map: ', err)\n    })\n    .finally(() => {\n        this.loadGoogleMap();\n    });\n  },\n\n  methods: {\n    loadGoogleMap() {\n        this.map = new google.maps.Map(document.getElementById(\"google-map\"), {\n              center: this.latlng,\n              zoom: 10,\n              gestureHandling: 'none'\n        });\n        this.setMarker(this.latlng);\n        google.maps.event.addListener(this.map, \"click\", (e) => {\n            this.latlng = {\n                lat: e.latLng.lat(),\n                lng: e.latLng.lng()\n            }\n            this.setMarker(e.latLng);\n            this.map.setCenter(this.latlng);\n        });\n    },\n    setMarker(location) {\n        if (this.marker) {\n            this.marker.setPosition(location);\n        } else {\n             this.marker = new google.maps.Marker({\n                position: location,\n                map: this.map,\n                draggable: true\n            });\n            google.maps.event.addListener(this.marker, 'dragend', data => { \n                this.latlng = {\n                    lat: this.marker.getPosition().lat(),\n                    lng: this.marker.getPosition().lng()\n                }\n                this.map.setCenter(this.latlng);\n                this.getWeatherData()\n            });\n        }\n        \n        this.getWeatherData()\n    },\n    getWeatherData() {\n        axios.get(`http://api.openweathermap.org/data/2.5/weather?lat=${this.latlng.lat}&lon=${this.latlng.lng}&units=imperial&appid=${this.weatherApiKey}`)\n        .then(res => {\n            this.weather = {\n                'Location': res.data.name,\n                'Condition': res.data.weather[0].main,\n                'Temperature': `${res.data.main.temp} F`,\n                'Humidity': `${res.data.main.humidity}%`,\n                'Sunrise': this.toDateString(res.data.sys.sunrise),\n                'Sunset': this.toDateString(res.data.sys.sunset),\n                'Wind Speed': `${res.data.wind.speed} mph`,\n                'Wind Direction': `${res.data.wind.deg} degrees`\n            }\n        }).catch(err => {\n            console.warn('Error fetching weather data: ', err);\n        })\n    },\n    toDateString(unixString) {\n        return new Date(unixString * 1000).toLocaleString(\"en-US\", {hour: \"numeric\", minute: \"numeric\", timeZone: 'America/Denver', timeZoneName: \"short\"});\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n.content-wrapper {\n    font-size: 20px;\n\n    & .weather-data {\n        text-align: left;\n        background-color: #00000005;\n        border-radius: 0.25rem;\n    }\n}\n\n#google-map {\n    height: 100vh;\n    width: 58.333vw;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}