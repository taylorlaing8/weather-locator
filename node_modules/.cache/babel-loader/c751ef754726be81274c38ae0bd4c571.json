{"ast":null,"code":"import { Loader } from \"@googlemaps/js-api-loader\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      googleApiKey: \"AIzaSyB41Bg4t97fmYwKs3MEL9DmicL53xQKpAY\",\n      weatherApiKey: \"6d78fcf2b6ddf4f00ae680a37639b3d6\",\n      latlng: {\n        lat: 40.76575889443308,\n        lng: -111.89062013069112\n      },\n      map: null,\n      marker: null,\n      loading: false,\n      weather: null\n    };\n  },\n\n  mounted() {\n    var mapLoader = new Loader({\n      apiKey: this.googleApiKey,\n      version: \"weekly\",\n      libraries: [\"places\"]\n    }).load().catch(err => {\n      console.warn(\"Err loading map: \", err);\n    }).finally(() => {\n      this.loadGoogleMap();\n    });\n  },\n\n  methods: {\n    loadGoogleMap() {\n      this.map = new google.maps.Map(document.getElementById(\"google-map\"), {\n        center: this.latlng,\n        zoom: 10,\n        gestureHandling: \"none\"\n      });\n      this.setMarker(this.latlng);\n      google.maps.event.addListener(this.map, \"click\", e => {\n        this.latlng = {\n          lat: e.latLng.lat(),\n          lng: e.latLng.lng()\n        };\n        this.setMarker(e.latLng);\n        this.map.setCenter(this.latlng);\n      });\n    },\n\n    setMarker(location) {\n      if (this.marker) {\n        this.marker.setPosition(location);\n      } else {\n        this.marker = new google.maps.Marker({\n          position: location,\n          map: this.map,\n          draggable: true\n        });\n        google.maps.event.addListener(this.marker, \"dragend\", data => {\n          this.latlng = {\n            lat: this.marker.getPosition().lat(),\n            lng: this.marker.getPosition().lng()\n          };\n          this.map.setCenter(this.latlng);\n          this.getWeatherData();\n        });\n      }\n\n      this.getWeatherData();\n    },\n\n    getWeatherData() {\n      this.loading = true;\n      axios.get(`http://api.openweathermap.org/data/2.5/weather?lat=${this.latlng.lat}&lon=${this.latlng.lng}&units=imperial&appid=${this.weatherApiKey}`).then(res => {\n        this.weather = {\n          Location: res.data.name,\n          Condition: res.data.weather[0].main,\n          Temperature: `${res.data.main.temp} F`,\n          Humidity: `${res.data.main.humidity}%`,\n          Sunrise: this.toDateString(res.data.sys.sunrise),\n          Sunset: this.toDateString(res.data.sys.sunset),\n          \"Wind Speed\": `${res.data.wind.speed} mph`,\n          \"Wind Direction\": `${res.data.wind.deg} degrees`\n        };\n      }).catch(err => {\n        console.warn(\"Error fetching weather data: \", err);\n      }).finally(() => {\n        this.loading = false;\n      });\n    },\n\n    toDateString(unixString) {\n      return new Date(unixString * 1000).toLocaleString(\"en-US\", {\n        hour: \"numeric\",\n        minute: \"numeric\",\n        timeZone: \"America/Denver\",\n        timeZoneName: \"short\"\n      });\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["Loader","axios","data","googleApiKey","weatherApiKey","latlng","lat","lng","map","marker","loading","weather","mounted","mapLoader","apiKey","version","libraries","load","catch","err","console","warn","finally","loadGoogleMap","methods","google","maps","Map","document","getElementById","center","zoom","gestureHandling","setMarker","event","addListener","e","latLng","setCenter","location","setPosition","Marker","position","draggable","getPosition","getWeatherData","get","then","res","Location","name","Condition","main","Temperature","temp","Humidity","humidity","Sunrise","toDateString","sys","sunrise","Sunset","sunset","wind","speed","deg","unixString","Date","toLocaleString","hour","minute","timeZone","timeZoneName"],"sourceRoot":"","sources":["/Users/taylorlaing/Desktop/Laing Development/GitHub/weather-locator/src/components/MapLocator.vue"],"sourcesContent":["<template>\n  <div class=\"content-wrapper\">\n    <div class=\"row text-center align-items-center\">\n      <div class=\"col col-md-7 order-md-1 col-12 order-2\">\n        <div id=\"google-map\"></div>\n      </div>\n      <div class=\"col col-md-5 order-md-2 col-12 order-1\">\n        <div class=\"row justify-content-center p-3\">\n          <div class=\"col col-10\">\n            <h2>Weather Discovery Map</h2>\n            <p class=\"small\">\n              Select a point on the map, or drag marker to a new position, to\n              find real-time data on the local weather\n            </p>\n          </div>\n        </div>\n        <template v-if=\"!weather || loading\">\n          <div class=\"row justify-content-center mx-3\" v-for=\"(item, key) of weather\" :key=\"key\">\n            <div class=\"col col-md-5 col-6 my-2\">\n              <h5>Loading Weather Data</h5>\n            </div>\n          </div>\n        </template>\n        <template v-else>\n            <TransitionGroup name=\"list\" tag=\"div\" appear>\n                <div class=\"row justify-content-center mx-3\" v-for=\"(item, key) of weather\" :key=\"key\">\n                    <div class=\"col col-md-5 col-6 my-2\">\n                        <span class=\"badge badge-primary w-100 px-3 py-2\">{{ key }}</span>\n                    </div>\n                    <div class=\"col col-md-7 col-6 my-2 weather-data\">\n                        {{ item }}\n                    </div>\n                </div>\n            </TransitionGroup>\n        </template>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { Loader } from \"@googlemaps/js-api-loader\";\nimport axios from \"axios\";\n\nexport default {\n  data() {\n    return {\n        googleApiKey: \"AIzaSyB41Bg4t97fmYwKs3MEL9DmicL53xQKpAY\",\n        weatherApiKey: \"6d78fcf2b6ddf4f00ae680a37639b3d6\",\n        latlng: {\n            lat: 40.76575889443308,\n            lng: -111.89062013069112,\n        },\n        map: null,\n        marker: null,\n        loading: false,\n        weather: null,\n    };\n  },\n\n  mounted() {\n    var mapLoader = new Loader({\n        apiKey: this.googleApiKey,\n        version: \"weekly\",\n        libraries: [\"places\"],\n    })\n    .load()\n    .catch((err) => {\n        console.warn(\"Err loading map: \", err);\n    })\n    .finally(() => {\n        this.loadGoogleMap();\n    });\n  },\n\n  methods: {\n    loadGoogleMap() {\n        this.map = new google.maps.Map(document.getElementById(\"google-map\"), {\n            center: this.latlng,\n            zoom: 10,\n            gestureHandling: \"none\",\n        });\n        this.setMarker(this.latlng);\n        google.maps.event.addListener(this.map, \"click\", (e) => {\n            this.latlng = {\n            lat: e.latLng.lat(),\n            lng: e.latLng.lng(),\n            };\n            this.setMarker(e.latLng);\n            this.map.setCenter(this.latlng);\n        });\n    },\n    setMarker(location) {\n        if (this.marker) {\n            this.marker.setPosition(location);\n        } else {\n            this.marker = new google.maps.Marker({\n            position: location,\n            map: this.map,\n            draggable: true,\n            });\n            google.maps.event.addListener(this.marker, \"dragend\", (data) => {\n            this.latlng = {\n                lat: this.marker.getPosition().lat(),\n                lng: this.marker.getPosition().lng(),\n            };\n            this.map.setCenter(this.latlng);\n            this.getWeatherData();\n            });\n        }\n\n        this.getWeatherData();\n    },\n    getWeatherData() {\n        this.loading = true;\n        axios.get(`http://api.openweathermap.org/data/2.5/weather?lat=${this.latlng.lat}&lon=${this.latlng.lng}&units=imperial&appid=${this.weatherApiKey}`)\n        .then((res) => {\n            this.weather = {\n                Location: res.data.name,\n                Condition: res.data.weather[0].main,\n                Temperature: `${res.data.main.temp} F`,\n                Humidity: `${res.data.main.humidity}%`,\n                Sunrise: this.toDateString(res.data.sys.sunrise),\n                Sunset: this.toDateString(res.data.sys.sunset),\n                \"Wind Speed\": `${res.data.wind.speed} mph`,\n                \"Wind Direction\": `${res.data.wind.deg} degrees`,\n            };\n        })\n        .catch((err) => {\n            console.warn(\"Error fetching weather data: \", err);\n        })\n        .finally(() => {\n            this.loading = false;\n        });\n    },\n    toDateString(unixString) {\n        return new Date(unixString * 1000).toLocaleString(\"en-US\", {\n            hour: \"numeric\",\n            minute: \"numeric\",\n            timeZone: \"America/Denver\",\n            timeZoneName: \"short\",\n        });\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\">\n.content-wrapper {\n    font-size: 20px;\n\n    & .weather-data {\n        text-align: left;\n        background-color: #00000008;\n        border-radius: 0.25rem;\n    }\n\n    & .list-enter-active, .list-leave-active {\n        transition: all 0.5s ease;\n    }\n    & .list-enter-from, .list-leave-to {\n        opacity: 0;\n        transform: translateX(30px);\n    }\n}\n\n#google-map {\n  height: 100vh;\n  width: 58.333vw;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}