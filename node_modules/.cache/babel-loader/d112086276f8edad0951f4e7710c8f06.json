{"ast":null,"code":"import { Loader } from \"@googlemaps/js-api-loader\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      googleApiKey: \"AIzaSyB41Bg4t97fmYwKs3MEL9DmicL53xQKpAY\",\n      weatherApiKey: \"6d78fcf2b6ddf4f00ae680a37639b3d6\",\n      latlng: {\n        lat: 40.76575889443308,\n        lng: -111.89062013069112\n      },\n      map: null,\n      marker: null,\n      loading: false,\n      weather: null\n    };\n  },\n\n  mounted() {\n    this.loading = true;\n    var mapLoader = new Loader({\n      apiKey: this.googleApiKey,\n      version: \"weekly\",\n      libraries: [\"places\"]\n    }).load().catch(err => {\n      console.warn(\"Err loading map: \", err);\n    }).finally(() => {\n      this.loadGoogleMap();\n    });\n  },\n\n  methods: {\n    loadGoogleMap() {\n      this.map = new google.maps.Map(document.getElementById(\"google-map\"), {\n        center: this.latlng,\n        zoom: 10,\n        gestureHandling: \"none\"\n      });\n      this.setMarker(this.latlng);\n      google.maps.event.addListener(this.map, \"click\", e => {\n        this.latlng = {\n          lat: e.latLng.lat(),\n          lng: e.latLng.lng()\n        };\n        this.setMarker(e.latLng);\n        this.map.setCenter(this.latlng);\n      });\n    },\n\n    setMarker(location) {\n      if (this.marker) {\n        this.marker.setPosition(location);\n      } else {\n        this.marker = new google.maps.Marker({\n          position: location,\n          map: this.map,\n          draggable: true\n        });\n        google.maps.event.addListener(this.marker, \"dragend\", data => {\n          this.latlng = {\n            lat: this.marker.getPosition().lat(),\n            lng: this.marker.getPosition().lng()\n          };\n          this.map.setCenter(this.latlng);\n          this.getWeatherData();\n        });\n      }\n\n      this.getWeatherData();\n    },\n\n    getWeatherData() {\n      axios.get(`http://api.openweathermap.org/data/2.5/weather?lat=${this.latlng.lat}&lon=${this.latlng.lng}&units=imperial&appid=${this.weatherApiKey}`).then(res => {\n        this.weather = {\n          Location: res.data.name,\n          Condition: res.data.weather[0].main,\n          Temperature: `${res.data.main.temp} F`,\n          Humidity: `${res.data.main.humidity}%`,\n          Sunrise: this.toDateString(res.data.sys.sunrise),\n          Sunset: this.toDateString(res.data.sys.sunset),\n          \"Wind Speed\": `${res.data.wind.speed} mph`,\n          \"Wind Direction\": `${res.data.wind.deg} degrees`\n        };\n      }).catch(err => {\n        console.warn(\"Error fetching weather data: \", err);\n      });\n    },\n\n    toDateString(unixString) {\n      return new Date(unixString * 1000).toLocaleString(\"en-US\", {\n        hour: \"numeric\",\n        minute: \"numeric\",\n        timeZone: \"America/Denver\",\n        timeZoneName: \"short\"\n      });\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["Loader","axios","data","googleApiKey","weatherApiKey","latlng","lat","lng","map","marker","loading","weather","mounted","mapLoader","apiKey","version","libraries","load","catch","err","console","warn","finally","loadGoogleMap","methods","google","maps","Map","document","getElementById","center","zoom","gestureHandling","setMarker","event","addListener","e","latLng","setCenter","location","setPosition","Marker","position","draggable","getPosition","getWeatherData","get","then","res","Location","name","Condition","main","Temperature","temp","Humidity","humidity","Sunrise","toDateString","sys","sunrise","Sunset","sunset","wind","speed","deg","unixString","Date","toLocaleString","hour","minute","timeZone","timeZoneName"],"sourceRoot":"","sources":["/Users/taylorlaing/Desktop/Laing Development/GitHub/weather-locator/src/components/MapLocator.vue"],"sourcesContent":["<template>\n  <div class=\"content-wrapper\">\n    <div class=\"row text-center align-items-center\">\n      <div class=\"col col-md-7 order-md-1 col-12 order-2\">\n        <div id=\"google-map\"></div>\n      </div>\n      <div class=\"col col-md-5 order-md-2 col-12 order-1\">\n        <div class=\"row justify-content-center p-3\">\n          <div class=\"col col-10\">\n            <h2>Weather Discovery Map</h2>\n            <p class=\"small\">\n              Select a point on the map, or drag marker to a new position, to\n              find real-time data on the local weather\n            </p>\n          </div>\n        </div>\n        <template v-if=\"weather || loading\">\n          <div class=\"row justify-content-center mx-3\" v-for=\"(item, key) of weather\" :key=\"key\">\n            <div class=\"col col-md-5 col-6 my-2\">\n              <h5>Loading Weather Data</h5>\n            </div>\n          </div>\n        </template>\n        <template v-else>\n          <div class=\"row justify-content-center mx-3\" v-for=\"(item, key) of weather\" :key=\"key\">\n            <div class=\"col col-md-5 col-6 my-2\">\n              <span class=\"badge badge-primary w-100 px-3 py-2\">{{ key }}</span>\n            </div>\n            <div class=\"col col-md-7 col-6 my-2 weather-data\">\n              {{ item }}\n            </div>\n          </div>\n        </template>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { Loader } from \"@googlemaps/js-api-loader\";\nimport axios from \"axios\";\n\nexport default {\n  data() {\n    return {\n      googleApiKey: \"AIzaSyB41Bg4t97fmYwKs3MEL9DmicL53xQKpAY\",\n      weatherApiKey: \"6d78fcf2b6ddf4f00ae680a37639b3d6\",\n      latlng: {\n        lat: 40.76575889443308,\n        lng: -111.89062013069112,\n      },\n      map: null,\n      marker: null,\n      loading: false,\n      weather: null,\n    };\n  },\n\n  mounted() {\n    this.loading = true;\n    var mapLoader = new Loader({\n      apiKey: this.googleApiKey,\n      version: \"weekly\",\n      libraries: [\"places\"],\n    })\n      .load()\n      .catch((err) => {\n        console.warn(\"Err loading map: \", err);\n      })\n      .finally(() => {\n        this.loadGoogleMap();\n      });\n  },\n\n  methods: {\n    loadGoogleMap() {\n      this.map = new google.maps.Map(document.getElementById(\"google-map\"), {\n        center: this.latlng,\n        zoom: 10,\n        gestureHandling: \"none\",\n      });\n      this.setMarker(this.latlng);\n      google.maps.event.addListener(this.map, \"click\", (e) => {\n        this.latlng = {\n          lat: e.latLng.lat(),\n          lng: e.latLng.lng(),\n        };\n        this.setMarker(e.latLng);\n        this.map.setCenter(this.latlng);\n      });\n    },\n    setMarker(location) {\n      if (this.marker) {\n        this.marker.setPosition(location);\n      } else {\n        this.marker = new google.maps.Marker({\n          position: location,\n          map: this.map,\n          draggable: true,\n        });\n        google.maps.event.addListener(this.marker, \"dragend\", (data) => {\n          this.latlng = {\n            lat: this.marker.getPosition().lat(),\n            lng: this.marker.getPosition().lng(),\n          };\n          this.map.setCenter(this.latlng);\n          this.getWeatherData();\n        });\n      }\n\n      this.getWeatherData();\n    },\n    getWeatherData() {\n      axios\n        .get(\n          `http://api.openweathermap.org/data/2.5/weather?lat=${this.latlng.lat}&lon=${this.latlng.lng}&units=imperial&appid=${this.weatherApiKey}`\n        )\n        .then((res) => {\n          this.weather = {\n            Location: res.data.name,\n            Condition: res.data.weather[0].main,\n            Temperature: `${res.data.main.temp} F`,\n            Humidity: `${res.data.main.humidity}%`,\n            Sunrise: this.toDateString(res.data.sys.sunrise),\n            Sunset: this.toDateString(res.data.sys.sunset),\n            \"Wind Speed\": `${res.data.wind.speed} mph`,\n            \"Wind Direction\": `${res.data.wind.deg} degrees`,\n          };\n        })\n        .catch((err) => {\n          console.warn(\"Error fetching weather data: \", err);\n        });\n    },\n    toDateString(unixString) {\n      return new Date(unixString * 1000).toLocaleString(\"en-US\", {\n        hour: \"numeric\",\n        minute: \"numeric\",\n        timeZone: \"America/Denver\",\n        timeZoneName: \"short\",\n      });\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\">\n.content-wrapper {\n  font-size: 20px;\n\n  & .weather-data {\n    text-align: left;\n    background-color: #00000008;\n    border-radius: 0.25rem;\n  }\n}\n\n#google-map {\n  height: 100vh;\n  width: 58.333vw;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}